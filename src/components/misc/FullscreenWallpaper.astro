---
import { Image } from "astro:assets";
import { siteConfig } from "../../config";
import type { FullscreenWallpaperConfig } from "../../types/config";

interface Props {
	config: FullscreenWallpaperConfig;
	className?: string;
}

const { config, className } = Astro.props;

// 如果全屏壁纸功能未启用，不渲染任何内容
if (!config.enable) {
	return null;
}

// 获取当前设备类型的图片源
const getImageSources = async () => {
	let srcConfig = config.src;

	// 如果banner关闭且启用了图片API，使用API图片
	if (
		!siteConfig.banner.enable &&
		siteConfig.banner.imageApi?.enable &&
		siteConfig.banner.imageApi?.url
	) {
		try {
			const response = await fetch(siteConfig.banner.imageApi.url);
			const text = await response.text();
			const apiImages = text.split("\n").filter((line) => line.trim());

			if (apiImages.length > 0) {
				// 将API图片同时用于桌面端和移动端
				return {
					desktop: apiImages,
					mobile: apiImages,
				};
			}
		} catch (error) {
			console.warn("Failed to fetch images from API for wallpaper:", error);
		}
	}

	const toArray = (src: string | string[] | undefined): string[] => {
		if (Array.isArray(src)) return src;
		if (typeof src === "string") return [src];
		return [];
	};
	if (
		typeof srcConfig === "object" &&
		srcConfig !== null &&
		!Array.isArray(srcConfig) &&
		("desktop" in srcConfig || "mobile" in srcConfig)
	) {
		const srcObj = srcConfig as {
			desktop?: string | string[];
			mobile?: string | string[]
		};
		const desktop = toArray(srcObj.desktop);
		const mobile = toArray(srcObj.mobile);
		return {
			desktop: desktop.length > 0 ? desktop : mobile,
			mobile: mobile.length > 0 ? mobile : desktop,
		};
	}
	// 如果是字符串或字符串数组，同时用于桌面端和移动端
	const allImages = toArray(srcConfig as string | string[]);
	return {
		desktop: allImages,
		mobile: allImages,
	};
};

const imageSources = await getImageSources();
const hasDesktopImages = imageSources.desktop.length > 0;
const hasMobileImages = imageSources.mobile.length > 0;

// 如果没有任何图片源，不渲染
if (!hasDesktopImages && !hasMobileImages) {
	return null;
}

// 轮播相关逻辑
const isCarouselEnabled =
	config.carousel?.enable &&
	(imageSources.desktop.length > 1 || imageSources.mobile.length > 1);
const carouselInterval = config.carousel?.interval || 5;

// 样式相关
const position = config.position || "center";
const zIndex = config.zIndex || -1;
const opacity = config.opacity || 0.8;
const blur = config.blur || 0;

// 生成位置类名
const getPositionClass = (pos: string) => {
	switch (pos) {
		case "top":
			return "object-top";
		case "bottom":
			return "object-bottom";
		default:
			return "object-center";
	}
};

const positionClass = getPositionClass(position);
---

<div 
	class:list={[
		"fixed inset-0 w-full h-full overflow-hidden pointer-events-none",
		className
	]}
	style={`z-index: ${zIndex}; opacity: ${opacity};`}
	data-fullscreen-wallpaper
>
	<!-- 桌面端壁纸 -->
	{hasDesktopImages && (
		<div class="hidden lg:block w-full h-full relative">
			{imageSources.desktop.map((src, index) => {
				const isLocal = !src.startsWith("http");
				const imageClass = `absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 ${positionClass}`;
				
				if (isLocal) {
					// 对于本地图片，使用img标签而不是Image组件
					return (
						<img
							src={src}
							alt={`Desktop wallpaper ${index + 1}`}
							class={imageClass}
							data-carousel-item={isCarouselEnabled ? index : undefined}
							style={blur > 0 ? `filter: blur(${blur}px);` : undefined}
						/>
					);
				} else {
					return (
						<img
							src={src}
							alt={`Desktop wallpaper ${index + 1}`}
							class={imageClass}
							data-carousel-item={isCarouselEnabled ? index : undefined}
							style={blur > 0 ? `filter: blur(${blur}px);` : undefined}
						/>
					);
				}
			})}
		</div>
	)}

	<!-- 移动端壁纸 -->
	{hasMobileImages && (
		<div class="block lg:hidden w-full h-full relative">
			{imageSources.mobile.map((src, index) => {
				const isLocal = !src.startsWith("http");
				const imageClass = `absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 ${positionClass}`;
				
				if (isLocal) {
					// 对于本地图片，使用img标签而不是Image组件
					return (
						<img
							src={src}
							alt={`Mobile wallpaper ${index + 1}`}
							class={imageClass}
							data-carousel-item={isCarouselEnabled ? index : undefined}
							style={blur > 0 ? `filter: blur(${blur}px);` : undefined}
						/>
					);
				} else {
					return (
						<img
							src={src}
							alt={`Mobile wallpaper ${index + 1}`}
							class={imageClass}
							data-carousel-item={isCarouselEnabled ? index : undefined}
							style={blur > 0 ? `filter: blur(${blur}px);` : undefined}
						/>
					);
				}
			})}
		</div>
	)}
</div>

{isCarouselEnabled && (
	<script define:vars={{ carouselInterval, shuffleMode: config.carousel?.shuffle || false }}>
		// 全屏壁纸轮播逻辑（支持真正的随机播放）
		function initFullscreenWallpaperCarousel() {
			const wallpaperContainer = document.querySelector('[data-fullscreen-wallpaper]');
			if (!wallpaperContainer) return;

			const desktopItems = wallpaperContainer.querySelectorAll('.hidden.lg\\:block [data-carousel-item]');
			const mobileItems = wallpaperContainer.querySelectorAll('.block.lg\\:hidden [data-carousel-item]');

			// Fisher-Yates 洗牌算法
			function shuffleArray(array) {
				const shuffled = [...array];
				for (let i = shuffled.length - 1; i > 0; i--) {
					const j = Math.floor(Math.random() * (i + 1));
					[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
				}
				return shuffled;
			}

			function startCarousel(items) {
				if (items.length <= 1) return;

				let playlist = Array.from(items);
				let shuffledPlaylist = [];
				let currentIndex = 0;
				let lastImageIndex = -1;

				// 生成新的随机播放列表
				function generateNewPlaylist() {
					if (shuffleMode) {
						// 洗牌所有图片
						const indices = playlist.map((_, idx) => idx);
						shuffledPlaylist = shuffleArray(indices);
						
						// 确保第一张图片不与上一轮的最后一张相同
						if (lastImageIndex !== -1 && shuffledPlaylist[0] === lastImageIndex) {
							// 如果第一张和上一张相同，与第二张交换
							if (shuffledPlaylist.length > 1) {
								[shuffledPlaylist[0], shuffledPlaylist[1]] = [shuffledPlaylist[1], shuffledPlaylist[0]];
							}
						}
					} else {
						// 顺序播放
						shuffledPlaylist = playlist.map((_, idx) => idx);
					}
					currentIndex = 0;
				}

				// 初始化：生成播放列表
				if (shuffleMode) {
					// 随机模式：随机选择第一张
					generateNewPlaylist();
					const firstIndex = shuffledPlaylist[0];
					items.forEach((item, index) => {
						item.style.opacity = index === firstIndex ? '1' : '0';
					});
					lastImageIndex = firstIndex;
				} else {
					// 顺序模式：显示第一张
					items.forEach((item, index) => {
						item.style.opacity = index === 0 ? '1' : '0';
					});
					generateNewPlaylist();
				}

				// 开始轮播
				setInterval(() => {
					// 隐藏当前图片
					const currentImageIndex = shuffledPlaylist[currentIndex];
					items[currentImageIndex].style.opacity = '0';
					
					// 移动到下一张
					currentIndex++;
					
					// 如果播放列表结束，生成新的随机列表
					if (currentIndex >= shuffledPlaylist.length) {
						lastImageIndex = currentImageIndex; // 记录上一轮的最后一张
						generateNewPlaylist();
					}
					
					// 显示下一张图片
					const nextImageIndex = shuffledPlaylist[currentIndex];
					items[nextImageIndex].style.opacity = '1';
					lastImageIndex = nextImageIndex;
				}, carouselInterval * 1000);
			}

			// 分别为桌面端和移动端启动轮播
			if (desktopItems.length > 0) {
				startCarousel(desktopItems);
			}
			if (mobileItems.length > 0) {
				startCarousel(mobileItems);
			}
		}

		// 页面加载完成后初始化轮播
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', initFullscreenWallpaperCarousel);
		} else {
			initFullscreenWallpaperCarousel();
		}
	</script>
)}