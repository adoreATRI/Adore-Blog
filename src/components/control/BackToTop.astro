---
import {Icon} from "astro-icon/components";
---

<!-- 圆形返回顶部按钮，带进度条和百分比 -->
<div id="back-to-top-btn" class="back-to-top-btn" onclick="window.scrollTo({top: 0, behavior: 'smooth'})">
    <svg class="progress-ring" width="58" height="58" viewBox="0 0 58 58">
        <circle class="progress-ring-bg" cx="29" cy="29" r="26" />
        <circle class="progress-ring-progress" cx="29" cy="29" r="26" id="progress-circle" />
    </svg>
    <div class="btn-circle">
        <Icon name="material-symbols:keyboard-arrow-up-rounded" class="icon-arrow"></Icon>
        <span id="progress-text" class="progress-text">0%</span>
    </div>
</div>

<style lang="stylus">
  /* 返回顶部按钮 */
  .back-to-top-btn
    position: fixed
    bottom: 9.5rem
    right: 2rem
    width: 58px
    height: 58px
    cursor: pointer
    opacity: 0
    transform: scale(0.8) translateY(20px)
    transition: opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1), transform 0.4s cubic-bezier(0.4, 0, 0.2, 1)
    z-index: 9999
    pointer-events: none
    will-change: opacity, transform

    &.show
      opacity: 1
      transform: scale(1) translateY(0)
      pointer-events: auto
    
    // 手机端调整位置
    @media (max-width: 768px)
      bottom: 9rem
      right: 1rem

  /* SVG 进度环 */
  .progress-ring
    position: absolute
    top: 0
    left: 0
    transform: rotate(-90deg)
    width: 58px
    height: 58px
    pointer-events: none
    
  .progress-ring-bg
    fill: none
    stroke: rgba(128, 128, 128, 0.15)
    stroke-width: 3
    
  .progress-ring-progress
    fill: none
    stroke: #3b82f6
    stroke-width: 3
    stroke-linecap: round
    transition: none
    will-change: stroke-dashoffset

  /* 圆形按钮 */
  .btn-circle
    position: absolute
    top: 4px
    left: 4px
    width: 50px
    height: 50px
    border-radius: 50%
    background: var(--card-bg)
    border: none
    display: flex
    align-items: center
    justify-content: center
    cursor: pointer
    transition: background 0.2s ease, box-shadow 0.2s ease
    color: var(--primary)
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15)
    pointer-events: none
    
    &:hover
      background: var(--btn-card-bg-hover)
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2)
      
      .icon-arrow
        opacity: 1
        
      .progress-text
        opacity: 0
      
    &:active
      transform: scale(0.95)

  .icon-arrow
    position: absolute
    font-size: 1.5rem
    opacity: 1
    transition: opacity 0.3s ease
    pointer-events: none

  /* 百分比文字 */
  .progress-text
    position: absolute
    font-size: 11px
    font-weight: 600
    color: var(--primary)
    opacity: 0
    transition: opacity 0.3s ease
    user-select: none
    pointer-events: none
  
  /* 滑动时显示百分比,隐藏箭头 */
  .back-to-top-btn.scrolling
    .icon-arrow
      opacity: 0
    
    .progress-text
      opacity: 1

  // 手机端隐藏
  @media (max-width: 768px)
    .back-to-top-btn
      display: none

</style>

<script is:inline>
// 简单可靠的返回顶部按钮实现
function initBackToTop() {
    const btn = document.getElementById('back-to-top-btn');
    const progressCircle = document.getElementById('progress-circle');
    const progressText = document.getElementById('progress-text');

    if (!btn || !progressCircle || !progressText) {
        return;
    }

    const radius = 26;
    const circumference = 2 * Math.PI * radius;
    let scrollTimeout = null;
    let ticking = false;
    let lastPercent = -1;
    
    // 初始化进度圈
    progressCircle.style.strokeDasharray = `${circumference}`;
    progressCircle.style.strokeDashoffset = `${circumference}`;
    
    // 检查是否在文章页面
    function isArticlePage() {
        return window.location.pathname.includes('/posts/');
    }
    
    // 如果不在文章页面,隐藏按钮并移除事件监听
    if (!isArticlePage()) {
        btn.style.display = 'none';
        return;
    } else {
        btn.style.display = 'block';
    }
    
    function updateProgress() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const docHeight = document.documentElement.scrollHeight - window.innerHeight;
        
        if (docHeight > 0) {
            const scrollPercent = Math.round((scrollTop / docHeight) * 100);
            
            // 始终更新进度条位置以保持流畅
            const offset = circumference - (scrollPercent / 100) * circumference;
            progressCircle.style.strokeDashoffset = `${offset}`;
            
            // 只在百分比变化时更新文字
            if (scrollPercent !== lastPercent) {
                lastPercent = scrollPercent;
                progressText.textContent = scrollPercent + '%';
            }
            
            // 显示/隐藏按钮
            if (scrollTop > 100) {
                if (!btn.classList.contains('show')) {
                    btn.classList.add('show');
                }
            } else {
                if (btn.classList.contains('show')) {
                    btn.classList.remove('show');
                }
            }
            
            // 滑动时显示百分比
            if (!btn.classList.contains('scrolling')) {
                btn.classList.add('scrolling');
            }
            
            // 停止滑动 1 秒后显示箭头
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                btn.classList.remove('scrolling');
            }, 1000);
        }
        
        ticking = false;
    }
    
    function onScroll() {
        if (!ticking) {
            window.requestAnimationFrame(updateProgress);
            ticking = true;
        }
    }
    
    window.addEventListener('scroll', onScroll, { passive: true });
    updateProgress();
}

// 页面加载时初始化
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initBackToTop);
} else {
    initBackToTop();
}

// Swup 页面切换时重新初始化
document.addEventListener('swup:page:view', initBackToTop);

// Astro 页面加载完成后初始化
document.addEventListener('astro:page-load', initBackToTop);
</script>
