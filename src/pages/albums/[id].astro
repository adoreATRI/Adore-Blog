---
import { siteConfig } from "../../config";
import I18nKey from "../../i18n/i18nKey";
import { i18n } from "../../i18n/translation";
import MainGridLayout from "../../layouts/MainGridLayout.astro";
import { scanAlbums } from "../../utils/album-scanner";
import ImageWrapper from "../../components/misc/ImageWrapper.astro";

// 检查相册页面是否启用
if (!siteConfig.featurePages.albums) {
	return Astro.redirect("/404/");
}

// ========== 关键：生成静态路径 ==========
// Astro 在构建时会调用这个函数，为每个相册生成一个页面
export async function getStaticPaths() {
	const albums = await scanAlbums();
	
	// 返回格式：每个相册一个路由配置
	return albums.map(album => ({
		params: { id: album.id },  // URL参数：/albums/[这里是id]/
		props: { album }           // 传递给页面的数据
	}));
}

// 从 getStaticPaths 接收数据
const { album } = Astro.props;

// 如果相册不存在，重定向到 404
if (!album) {
	return Astro.redirect("/404/");
}
---

<MainGridLayout title={album.title} description={album.description}>
	<div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
		<div class="card-base z-10 px-6 md:px-9 py-6 relative w-full">
			
			<!-- 返回按钮 -->
			<div class="mb-6">
				<a href="/albums/" class="inline-flex items-center gap-2 text-sm text-neutral-600 dark:text-neutral-400 hover:text-[var(--primary)] transition-colors">
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
					</svg>
					{i18n(I18nKey.albumsBackToList)}
				</a>
			</div>

			<!-- 相册标题和信息 -->
			<header class="mb-8">
				<h1 class="text-3xl md:text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-3">
					{album.title}
				</h1>
				
				{album.description && (
					<p class="text-lg text-neutral-600 dark:text-neutral-400 mb-4">
						{album.description}
					</p>
				)}
				
				<!-- 元数据 -->
				<div class="flex flex-wrap items-center gap-4 text-sm text-neutral-500">
					<span class="flex items-center gap-1">
						<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
						</svg>
						{album.photos.length} 张照片
					</span>
					
					{album.location && (
						<span class="flex items-center gap-1">
							<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
							</svg>
							{album.location}
						</span>
					)}
					
					<span class="flex items-center gap-1">
						<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
						</svg>
						{new Date(album.date).toLocaleDateString('zh-CN')}
					</span>
				</div>
				
				<!-- 标签 -->
				{album.tags && album.tags.length > 0 && (
					<div class="flex flex-wrap gap-2 mt-4">
						{album.tags.map(tag => (
							<span class="btn-regular h-7 text-sm px-3 rounded-lg">
								{tag}
							</span>
						))}
					</div>
				)}
			</header>

			<!-- 照片网格 -->
			<div 
				class={`album-grid ${album.layout === 'masonry' ? 'masonry-layout' : 'grid-layout'}`}
				style={album.layout === 'grid' ? `grid-template-columns: repeat(${album.columns || 3}, 1fr);` : ''}
			>
				{album.photos.map((photo, index) => (
					<div 
						class="photo-item group cursor-pointer overflow-hidden rounded-lg bg-neutral-100 dark:bg-neutral-800 transition-all duration-300 hover:shadow-lg relative"
						data-index={index}
						data-src={photo.src}
					>
						<ImageWrapper
							src={photo.src}
							alt={photo.alt || photo.title}
							class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
						/>
						
						{(photo.title || (photo.tags && photo.tags.length > 0)) && (
							<div class="absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/70 to-transparent p-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
								{photo.title && (
									<p class="text-white text-sm font-medium">{photo.title}</p>
								)}
								{photo.tags && photo.tags.length > 0 && (
									<div class="flex flex-wrap gap-1 mt-1">
										{photo.tags.map(tag => (
											<span class="text-xs text-white/80">#{tag}</span>
										))}
									</div>
								)}
							</div>
						)}
					</div>
				))}
			</div>

		</div>
	</div>

	<style>
		/* ========== 网格布局 ========== */
		.grid-layout {
			display: grid;
			gap: 1rem;
		}

		/* 响应式：平板 */
		@media (max-width: 768px) {
			.grid-layout {
				grid-template-columns: repeat(2, 1fr) !important;
			}
		}

		/* 响应式：手机 */
		@media (max-width: 480px) {
			.grid-layout {
				grid-template-columns: 1fr !important;
			}
		}

		/* ========== 瀑布流布局 ========== */
		.masonry-layout {
			column-count: 3;
			column-gap: 1rem;
		}

		@media (max-width: 1024px) {
			.masonry-layout {
				column-count: 2;
			}
		}

		@media (max-width: 640px) {
			.masonry-layout {
				column-count: 1;
			}
		}

		.masonry-layout .photo-item {
			break-inside: avoid;
			margin-bottom: 1rem;
		}

		/* ========== 图片样式 ========== */
		.photo-item {
			position: relative;
		}

		.photo-item img {
			display: block;
			width: 100%;
			height: auto;
		}
	</style>

	<!-- ========== 图片查看器脚本 ========== -->
	<script is:inline>
		// 等待 DOM 加载完成
		function initPhotoViewer() {
			const photoItems = document.querySelectorAll('.photo-item');
			console.log('找到照片数量:', photoItems.length); // 调试信息
			
			// 为每张照片添加点击事件
			photoItems.forEach((item, idx) => {
				item.addEventListener('click', function() {
					console.log('点击了照片:', idx); // 调试信息
					const imgSrc = this.getAttribute('data-src');
					console.log('图片路径:', imgSrc); // 调试信息
					
					if (imgSrc) {
						// 缩放控制变量
						let scale = 1;
						let isDragging = false;
						let startX = 0, startY = 0;
						let translateX = 0, translateY = 0;
						
						// 创建全屏遮罩层
						const overlay = document.createElement('div');
						overlay.style.cssText = 'position:fixed;inset:0;background:rgba(0,0,0,0.95);z-index:9999;display:flex;align-items:center;justify-content:center;padding:1rem;overflow:hidden;';
						
						// 创建图片容器（用于缩放和拖拽）
						const imgContainer = document.createElement('div');
						imgContainer.style.cssText = 'position:relative;transition:transform 0.1s ease-out;cursor:grab;';
						
						// 创建关闭按钮
						const closeBtn = document.createElement('button');
						closeBtn.innerHTML = '✕';
						closeBtn.style.cssText = 'position:fixed;top:1rem;right:1rem;z-index:10000;width:2.5rem;height:2.5rem;display:flex;align-items:center;justify-content:center;background:rgba(255,255,255,0.1);color:white;font-size:1.5rem;border-radius:50%;border:none;cursor:pointer;transition:all 0.2s;';
						closeBtn.onmouseover = () => closeBtn.style.background = 'rgba(255,255,255,0.2)';
						closeBtn.onmouseout = () => closeBtn.style.background = 'rgba(255,255,255,0.1)';
						closeBtn.onclick = function(e) {
							e.stopPropagation();
							document.body.removeChild(overlay);
							document.body.style.overflow = '';
						};
						
						// 创建缩放提示
						const zoomHint = document.createElement('div');
						zoomHint.style.cssText = 'position:fixed;bottom:1rem;left:50%;transform:translateX(-50%);z-index:10000;padding:0.5rem 1rem;background:rgba(255,255,255,0.1);color:white;font-size:0.875rem;border-radius:0.5rem;pointer-events:none;';
						zoomHint.textContent = '滚轮缩放 | 拖拽移动 | 双击重置';
						
						// 创建大图
						const largeImg = document.createElement('img');
						largeImg.src = imgSrc;
						largeImg.style.cssText = 'max-width:90vw;max-height:90vh;object-fit:contain;user-select:none;pointer-events:none;';
						
						// 更新变换
						function updateTransform() {
							imgContainer.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
						}
						
						// 滚轮缩放
						const handleWheel = function(e) {
							e.preventDefault();
							const delta = e.deltaY > 0 ? -0.1 : 0.1;
							const newScale = Math.min(Math.max(0.5, scale + delta), 5); // 限制缩放范围 0.5-5倍
							
							if (newScale !== scale) {
								scale = newScale;
								updateTransform();
								
								// 更新提示文字
								zoomHint.textContent = `${Math.round(scale * 100)}% | 拖拽移动 | 双击重置`;
							}
						};
						
						// 鼠标拖拽
						imgContainer.onmousedown = function(e) {
							if (scale > 1) {
								isDragging = true;
								startX = e.clientX - translateX;
								startY = e.clientY - translateY;
								imgContainer.style.cursor = 'grabbing';
								imgContainer.style.transition = 'none';
								e.preventDefault();
							}
						};
						
						overlay.onmousemove = function(e) {
							if (isDragging) {
								translateX = e.clientX - startX;
								translateY = e.clientY - startY;
								updateTransform();
							}
						};
						
						overlay.onmouseup = function() {
							isDragging = false;
							imgContainer.style.cursor = 'grab';
							imgContainer.style.transition = 'transform 0.1s ease-out';
						};
						
						// 双击重置
						imgContainer.ondblclick = function(e) {
							e.stopPropagation();
							scale = 1;
							translateX = 0;
							translateY = 0;
							updateTransform();
							zoomHint.textContent = '滚轮缩放 | 拖拽移动 | 双击重置';
						};
						
						// 点击遮罩层关闭（只有在未缩放时）
						overlay.onclick = function(e) {
							if (e.target === overlay && scale === 1) {
								document.body.removeChild(overlay);
								document.body.style.overflow = '';
							}
						};
						
						// 键盘 ESC 关闭
						const handleKeyPress = function(e) {
							if (e.key === 'Escape') {
								document.body.removeChild(overlay);
								document.body.style.overflow = '';
								document.removeEventListener('keydown', handleKeyPress);
							}
						};
						document.addEventListener('keydown', handleKeyPress);
						
						// 监听滚轮事件
						overlay.addEventListener('wheel', handleWheel, { passive: false });
						
						// 组装元素
						imgContainer.appendChild(largeImg);
						overlay.appendChild(imgContainer);
						overlay.appendChild(closeBtn);
						overlay.appendChild(zoomHint);
						document.body.appendChild(overlay);
						
						// 防止页面滚动
						document.body.style.overflow = 'hidden';
						
						// 3秒后隐藏提示
						setTimeout(() => {
							zoomHint.style.opacity = '0';
							zoomHint.style.transition = 'opacity 0.3s';
						}, 3000);
					}
				});
			});
		}
		
		// 页面加载时初始化
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', initPhotoViewer);
		} else {
			initPhotoViewer();
		}
	</script>

	<!-- 动画样式 -->
	<style is:global>
		@keyframes fadeIn {
			from { opacity: 0; }
			to { opacity: 1; }
		}
		
		@keyframes fadeOut {
			from { opacity: 1; }
			to { opacity: 0; }
		}
	</style>
</MainGridLayout>
